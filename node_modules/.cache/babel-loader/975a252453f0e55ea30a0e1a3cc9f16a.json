{"ast":null,"code":"//List of all the states in Romania , ordered alphabetically\nexport var states=['Alba','Arad','Argeș','Bacău','Bihor','Bistrița-Năsăud','Botoșani','Brăila','Brașov','București','Buzău','Călărași','Caraș-Severin','Cluj','Constanța','Covasna','Dâmbovița','Dolj','Galați','Giurgiu','Gorj','Harghita','Hunedoara','Ialomița','Iași','Ilfov','Maramureș','Mehedinți','Mureș','Neamț','Olt','Prahova','Sălaj','Satu Mare','Sibiu','Suceava','Teleorman','Timiș','Tulcea','Vâlcea','Vaslui','Vrancea'];//List of all regexes used for user input validation\nexport var regexList={//regex that matches letters , diacritics and whitespaces\nonlyLetters:\"^[a-zA-ZÀ-ž- ]+$\",//regex that matches letters , digits and whitespaces (min 1 of each)\naddress:\"^(?:[0-9 ]+[a-zA-ZÀ-ž ]|[a-zA-ZÀ-ž ]+[0-9 ])[a-zA-ZÀ-ž0-9 ]*$\",//regex that matches a sequence of exact 6 digits\nzipCode:\"^[0-9]{6}$\",//regex that matches a valid phone number\nphoneNumber:\"^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$\",//regex that matches a valid mail address (only (A-Za-z0-9_!#$%&'*+/=?`{|}~^.-) before the @ and only (A-Za-z.-) after that)\nmailAddress:\"^[A-Za-z0-9_!#$%&'*+/=?`{|}~^.-]+@[A-Za-z.-]+$\"};//List of all ids for the input fields\nexport var inputIds=[\"firstName\",\"lastName\",\"firstAddress\",\"secondAddress\",\"city\",\"state\",\"zipCode\",\"phoneNumber\",\"mailAddress\"];/**\r\n * Returns a validation state object based on a state \r\n * @param {Boolean | null} initialState The value for every key in the object\r\n * @returns {Object}                    Initialized state object\r\n */export var getStateObject=function getStateObject(initialState){return{validFirstName:initialState,validLastName:initialState,validAddrLine1:initialState,validAddrLine2:initialState,validCity:initialState,validState:initialState,validZipCode:initialState,validPhone:initialState,validMail:initialState,validCaptcha:initialState};};","map":{"version":3,"sources":["C:/React_Projects/ddroidd_internship/webapp/app/src/Form/constants.js"],"names":["states","regexList","onlyLetters","address","zipCode","phoneNumber","mailAddress","inputIds","getStateObject","initialState","validFirstName","validLastName","validAddrLine1","validAddrLine2","validCity","validState","validZipCode","validPhone","validMail","validCaptcha"],"mappings":"AAAA;AACA,MAAO,IAAMA,CAAAA,MAAM,CAAG,CAAC,MAAD,CAAU,MAAV,CAAmB,OAAnB,CAA6B,OAA7B,CAAuC,OAAvC,CAAiD,iBAAjD,CAAqE,UAArE,CAAkF,QAAlF,CAA6F,QAA7F,CAAwG,WAAxG,CAAuH,OAAvH,CAAiI,UAAjI,CACL,eADK,CACa,MADb,CACsB,WADtB,CACoC,SADpC,CACgD,WADhD,CAC8D,MAD9D,CACuE,QADvE,CACkF,SADlF,CAC8F,MAD9F,CACuG,UADvG,CACoH,WADpH,CAEL,UAFK,CAEQ,MAFR,CAEiB,OAFjB,CAE2B,WAF3B,CAEyC,WAFzC,CAEuD,OAFvD,CAEiE,OAFjE,CAE2E,KAF3E,CAEmF,SAFnF,CAE+F,OAF/F,CAEyG,WAFzG,CAEuH,OAFvH,CAGL,SAHK,CAGO,WAHP,CAGqB,OAHrB,CAG+B,QAH/B,CAG0C,QAH1C,CAGqD,QAHrD,CAGgE,SAHhE,CAAf,CAKP;AACA,MAAO,IAAMC,CAAAA,SAAS,CAAG,CACrB;AACAC,WAAW,CAAG,kBAFO,CAGrB;AACAC,OAAO,CAAG,+DAJW,CAKrB;AACAC,OAAO,CAAG,YANW,CAOrB;AACAC,WAAW,CAAG,2DARO,CASrB;AACAC,WAAW,CAAG,gDAVO,CAAlB,CAaP;AACA,MAAO,IAAMC,CAAAA,QAAQ,CAAG,CAAC,WAAD,CAAe,UAAf,CAA4B,cAA5B,CAA6C,eAA7C,CAA+D,MAA/D,CAAwE,OAAxE,CAAkF,SAAlF,CAA8F,aAA9F,CAA8G,aAA9G,CAAjB,CAEP;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,YAAD,CAAkB,CAC5C,MAAO,CACHC,cAAc,CAAGD,YADd,CAEHE,aAAa,CAAGF,YAFb,CAGHG,cAAc,CAAGH,YAHd,CAIHI,cAAc,CAAGJ,YAJd,CAKHK,SAAS,CAAGL,YALT,CAMHM,UAAU,CAAGN,YANV,CAOHO,YAAY,CAAGP,YAPZ,CAQHQ,UAAU,CAAGR,YARV,CASHS,SAAS,CAAGT,YATT,CAUHU,YAAY,CAAGV,YAVZ,CAAP,CAYH,CAbM","sourcesContent":["//List of all the states in Romania , ordered alphabetically\r\nexport const states = ['Alba' , 'Arad' , 'Argeș' , 'Bacău' , 'Bihor' , 'Bistrița-Năsăud' , 'Botoșani' , 'Brăila' , 'Brașov' , 'București' ,  'Buzău' , 'Călărași' ,\r\n                 'Caraș-Severin' , 'Cluj' , 'Constanța' , 'Covasna' , 'Dâmbovița' , 'Dolj' , 'Galați' , 'Giurgiu' , 'Gorj' , 'Harghita' , 'Hunedoara' ,\r\n                 'Ialomița' , 'Iași' , 'Ilfov' , 'Maramureș' , 'Mehedinți' , 'Mureș' , 'Neamț' , 'Olt' , 'Prahova' , 'Sălaj' , 'Satu Mare' , 'Sibiu' ,\r\n                 'Suceava' , 'Teleorman' , 'Timiș' , 'Tulcea' , 'Vâlcea' , 'Vaslui' , 'Vrancea'];\r\n\r\n//List of all regexes used for user input validation\r\nexport const regexList = {\r\n    //regex that matches letters , diacritics and whitespaces\r\n    onlyLetters : \"^[a-zA-ZÀ-ž- ]+$\" ,\r\n    //regex that matches letters , digits and whitespaces (min 1 of each)\r\n    address : \"^(?:[0-9 ]+[a-zA-ZÀ-ž ]|[a-zA-ZÀ-ž ]+[0-9 ])[a-zA-ZÀ-ž0-9 ]*$\" ,\r\n    //regex that matches a sequence of exact 6 digits\r\n    zipCode : \"^[0-9]{6}$\" ,\r\n    //regex that matches a valid phone number\r\n    phoneNumber : \"^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$\" ,\r\n    //regex that matches a valid mail address (only (A-Za-z0-9_!#$%&'*+/=?`{|}~^.-) before the @ and only (A-Za-z.-) after that)\r\n    mailAddress : \"^[A-Za-z0-9_!#$%&'*+/=?`{|}~^.-]+@[A-Za-z.-]+$\"\r\n}\r\n\r\n//List of all ids for the input fields\r\nexport const inputIds = [\"firstName\" , \"lastName\" , \"firstAddress\" , \"secondAddress\" , \"city\" , \"state\" , \"zipCode\" , \"phoneNumber\" , \"mailAddress\"];\r\n\r\n/**\r\n * Returns a validation state object based on a state \r\n * @param {Boolean | null} initialState The value for every key in the object\r\n * @returns {Object}                    Initialized state object\r\n */\r\nexport const getStateObject = (initialState) => {\r\n    return {\r\n        validFirstName : initialState ,\r\n        validLastName : initialState ,\r\n        validAddrLine1 : initialState ,\r\n        validAddrLine2 : initialState ,\r\n        validCity : initialState ,\r\n        validState : initialState ,\r\n        validZipCode : initialState ,\r\n        validPhone : initialState ,\r\n        validMail : initialState ,\r\n        validCaptcha : initialState ,\r\n    }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}