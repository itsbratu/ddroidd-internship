{"ast":null,"code":"var _jsxFileName = \"C:\\\\React_Projects\\\\ddroidd_internship\\\\webapp\\\\app\\\\src\\\\Form\\\\SubAddressField.jsx\";\n//Component that allows the user to input their address\nimport React from 'react';\nimport { states } from './constants';\nimport propTypes from 'prop-types';\n/**\r\n * Displays an error message based on the subaddress input field\r\n * @param {String} subAddressType Name of the input field (\"City / Zip code\")\r\n * @returns h1\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst switchErrorMsg = subAddressType => {\n  if (subAddressType === \"City\") {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"w-full h-1/3 text-red text-xl screen-l:text-lg screen-2xl:text-3xl italic font-extrabold pt-5 px-5\",\n      children: \"City name should contain only letters!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"w-full h-1/3 text-red text-xl screen-l:text-lg screen-2xl:text-3xl italic font-extrabold pt-5 px-5\",\n      children: \"Please provide valid zip code!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this);\n  }\n};\n\nconst SubAddressField = props => {\n  {\n    /* Conditional rendering based on the type of subaddress user input field */\n  }\n  {\n    /* State select box */\n  }\n\n  if (props.name === \"State\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col justify-center h-full w-1/3 px-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: `${props.id}`,\n        className: \"text-2xl screen-2xl:text-3xl text-prussian-blue font-bold\",\n        children: [props.name, \":\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-red\",\n          children: \"*\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 38\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: `${props.id}`,\n        className: `h-1/3 px-3 text-xl font-bold shadow-xl rounded-sm ${props.userValidInput === true && 'border-4 border-green rounded-xl'}`,\n        placeholder: props.name,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          disabled: true,\n          selected: true,\n          value: true,\n          children: \"State\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 25\n        }, this), states.map((currentState, key) => {\n          return /*#__PURE__*/_jsxDEV(\"option\", {\n            id: key,\n            value: currentState,\n            children: currentState\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 33\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), props.userValidInput === false && /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"w-full h-1/3 text-red text-xl screen-2xl:text-3xl italic font-extrabold pt-5 px-5\",\n        children: \"Please select a state!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 52\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col justify-center h-full w-1/3 px-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: `${props.id}`,\n        className: \"text-2xl screen-2xl:text-3xl text-black font-bold\",\n        children: [props.name, \":\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-red\",\n          children: \"*\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 38\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: `${props.id}`,\n        className: `h-1/3 px-3 text-xl screen-l:text-lg screen-2xl:text-2xl font-bold shadow-input-shadow rounded-sm ${props.userValidInput === true && 'border-4 border-green rounded-xl'}`,\n        placeholder: props.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), props.userValidInput === false && switchErrorMsg(props.name)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_c = SubAddressField;\nSubAddressField.propTypes = {\n  name: propTypes.string.isRequired,\n  id: propTypes.string.isRequired,\n  userValidInput: propTypes.bool.isRequired\n};\nexport default SubAddressField;\n\nvar _c;\n\n$RefreshReg$(_c, \"SubAddressField\");","map":{"version":3,"sources":["C:/React_Projects/ddroidd_internship/webapp/app/src/Form/SubAddressField.jsx"],"names":["React","states","propTypes","switchErrorMsg","subAddressType","SubAddressField","props","name","id","userValidInput","map","currentState","key","string","isRequired","bool"],"mappings":"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","sourcesContent":["//Component that allows the user to input their address\r\n\r\nimport React from 'react'\r\nimport {states} from './constants';\r\nimport propTypes from 'prop-types';\r\n\r\n/**\r\n * Displays an error message based on the subaddress input field\r\n * @param {String} subAddressType Name of the input field (\"City / Zip code\")\r\n * @returns h1\r\n */\r\nconst switchErrorMsg = (subAddressType) => {\r\n    if(subAddressType === \"City\"){\r\n        return (\r\n            <h1 className='w-full h-1/3 text-red text-xl screen-l:text-lg screen-2xl:text-3xl italic font-extrabold pt-5 px-5'>City name should contain only letters!</h1>\r\n        );\r\n    }else{\r\n        return (\r\n            <h1 className='w-full h-1/3 text-red text-xl screen-l:text-lg screen-2xl:text-3xl italic font-extrabold pt-5 px-5'>Please provide valid zip code!</h1>\r\n        );\r\n    }\r\n}\r\n\r\nconst SubAddressField = (props) => {\r\n\r\n    {/* Conditional rendering based on the type of subaddress user input field */}\r\n\r\n    {/* State select box */}\r\n    if(props.name === \"State\"){\r\n        return(\r\n            <div className='flex flex-col justify-center h-full w-1/3 px-5'>\r\n                <label \r\n                    htmlFor = {`${props.id}`} \r\n                    className='text-2xl screen-2xl:text-3xl text-prussian-blue font-bold'>\r\n                        {props.name}:<span className='text-red'>*</span>\r\n                </label>\r\n                <select \r\n                    id = {`${props.id}`} \r\n                    className= {`h-1/3 px-3 text-xl font-bold shadow-xl rounded-sm ${props.userValidInput === true && 'border-4 border-green rounded-xl'}`} \r\n                    placeholder={props.name}>\r\n                        <option disabled selected value>State</option>\r\n                        {states.map((currentState , key) => {\r\n                            return(\r\n                                <option id = {key} value = {currentState}>{currentState}</option>\r\n                            )\r\n                        })}\r\n                </select>\r\n                {/* Custom error message if user did not select a state */}\r\n                {props.userValidInput === false && <h1 className='w-full h-1/3 text-red text-xl screen-2xl:text-3xl italic font-extrabold pt-5 px-5'>Please select a state!</h1>}\r\n            </div>\r\n        );\r\n    }else{\r\n        return(\r\n            <div className='flex flex-col justify-center h-full w-1/3 px-5'>\r\n                <label \r\n                    htmlFor = {`${props.id}`} \r\n                    className='text-2xl screen-2xl:text-3xl text-black font-bold'>\r\n                        {props.name}:<span className='text-red'>*</span>\r\n                </label>\r\n                <input \r\n                    id = {`${props.id}`} \r\n                    className= {`h-1/3 px-3 text-xl screen-l:text-lg screen-2xl:text-2xl font-bold shadow-input-shadow rounded-sm ${props.userValidInput === true && 'border-4 border-green rounded-xl'}`} \r\n                    placeholder={props.name}\r\n                />\r\n                {/* Custom error message based on the subaddress input field type */}\r\n                {props.userValidInput === false && switchErrorMsg(props.name)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nSubAddressField.propTypes = {\r\n    name : propTypes.string.isRequired ,\r\n    id : propTypes.string.isRequired , \r\n    userValidInput : propTypes.bool.isRequired\r\n}\r\n\r\nexport default SubAddressField;"]},"metadata":{},"sourceType":"module"}