{"ast":null,"code":"import { regexList } from './constants';\nimport { inputIds } from './constants';\n/**\r\n * Collects user input from registration form\r\n * @returns {Object}  User data object (key - input field , value - user input)\r\n */\n\nexport const getUserInput = () => {\n  var userInputs = {\n    firstName: \"\",\n    lastName: \"\",\n    firstAddress: \"\",\n    secondAddress: \"\",\n    city: \"\",\n    state: \"\",\n    zipCode: \"\",\n    phoneNumber: \"\",\n    mailAddress: \"\"\n  };\n  inputIds.map((currentInputField, _) => {\n    userInputs[currentInputField] = document.getElementById(currentInputField).value;\n  });\n  return userInputs;\n};\n/**\r\n * Validates the name section of the form\r\n * @param {String} firstName User input for the first name field\r\n * @param {String} lastName \r\n * @param {*} validInput \r\n */\n\nexport const validateName = (firstName, lastName, validInput) => {\n  const onlyLettersRegex = new RegExp(regexList.onlyLetters);\n\n  if (!onlyLettersRegex.test(firstName)) {\n    validInput.validFirstName = false;\n  }\n\n  if (!onlyLettersRegex.test(lastName)) {\n    validInput.validLastName = false;\n  }\n}; //function that validates the address section of the form\n\nexport const validateAddress = (addressLine1, addressLine2, city, state, zipCode, validInput) => {\n  const onlyLettersRegex = new RegExp(regexList.onlyLetters);\n  const zipCodeRegex = new RegExp(regexList.zipCode);\n  const addressRegex = new RegExp(regexList.address);\n\n  if (!addressRegex.test(addressLine1)) {\n    validInput.validAddrLine1 = false;\n  }\n\n  if (addressLine2.length > 0 && !addressRegex.test(addressLine2)) {\n    validInput.validAddrLine2 = false;\n  }\n\n  if (!onlyLettersRegex.test(city)) {\n    validInput.validCity = false;\n  }\n\n  if (state === 'true') {\n    validInput.validState = false;\n  }\n\n  if (!zipCodeRegex.test(zipCode)) {\n    validInput.validZipCode = false;\n  }\n}; //function that validates the contact section of the form\n\nexport const validateContact = (phone, mail, validInput) => {\n  const phoneRegex = new RegExp(regexList.phoneNumber);\n  const mailRegex = new RegExp(regexList.mailAddress);\n\n  if (!phoneRegex.test(phone)) {\n    validInput.validPhone = false;\n  }\n\n  if (!mailRegex.test(mail)) {\n    validInput.validMail = false;\n  }\n};","map":{"version":3,"sources":["C:/React_Projects/ddroidd_internship/webapp/app/src/Form/userValidation.js"],"names":["regexList","inputIds","getUserInput","userInputs","firstName","lastName","firstAddress","secondAddress","city","state","zipCode","phoneNumber","mailAddress","map","currentInputField","_","document","getElementById","value","validateName","validInput","onlyLettersRegex","RegExp","onlyLetters","test","validFirstName","validLastName","validateAddress","addressLine1","addressLine2","zipCodeRegex","addressRegex","address","validAddrLine1","length","validAddrLine2","validCity","validState","validZipCode","validateContact","phone","mail","phoneRegex","mailRegex","validPhone","validMail"],"mappings":"AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAC9B,MAAIC,UAAU,GAAG;AACbC,IAAAA,SAAS,EAAG,EADC;AAEbC,IAAAA,QAAQ,EAAG,EAFE;AAGbC,IAAAA,YAAY,EAAG,EAHF;AAIbC,IAAAA,aAAa,EAAG,EAJH;AAKbC,IAAAA,IAAI,EAAG,EALM;AAMbC,IAAAA,KAAK,EAAG,EANK;AAObC,IAAAA,OAAO,EAAG,EAPG;AAQbC,IAAAA,WAAW,EAAG,EARD;AASbC,IAAAA,WAAW,EAAG;AATD,GAAjB;AAWAX,EAAAA,QAAQ,CAACY,GAAT,CAAa,CAACC,iBAAD,EAAqBC,CAArB,KAA2B;AACpCZ,IAAAA,UAAU,CAACW,iBAAD,CAAV,GAAgCE,QAAQ,CAACC,cAAT,CAAwBH,iBAAxB,EAA2CI,KAA3E;AACH,GAFD;AAGA,SAAOf,UAAP;AACH,CAhBM;AAkBP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMgB,YAAY,GAAG,CAACf,SAAD,EAAaC,QAAb,EAAwBe,UAAxB,KAAuC;AAC/D,QAAMC,gBAAgB,GAAG,IAAIC,MAAJ,CAAWtB,SAAS,CAACuB,WAArB,CAAzB;;AACA,MAAG,CAACF,gBAAgB,CAACG,IAAjB,CAAsBpB,SAAtB,CAAJ,EAAqC;AACjCgB,IAAAA,UAAU,CAACK,cAAX,GAA4B,KAA5B;AACH;;AACD,MAAG,CAACJ,gBAAgB,CAACG,IAAjB,CAAsBnB,QAAtB,CAAJ,EAAoC;AAChCe,IAAAA,UAAU,CAACM,aAAX,GAA2B,KAA3B;AACH;AACJ,CARM,C,CAUP;;AACA,OAAO,MAAMC,eAAe,GAAG,CAACC,YAAD,EAAgBC,YAAhB,EAA+BrB,IAA/B,EAAsCC,KAAtC,EAA8CC,OAA9C,EAAwDU,UAAxD,KAAuE;AAClG,QAAMC,gBAAgB,GAAG,IAAIC,MAAJ,CAAWtB,SAAS,CAACuB,WAArB,CAAzB;AACA,QAAMO,YAAY,GAAG,IAAIR,MAAJ,CAAWtB,SAAS,CAACU,OAArB,CAArB;AACA,QAAMqB,YAAY,GAAG,IAAIT,MAAJ,CAAWtB,SAAS,CAACgC,OAArB,CAArB;;AACA,MAAG,CAACD,YAAY,CAACP,IAAb,CAAkBI,YAAlB,CAAJ,EAAoC;AAChCR,IAAAA,UAAU,CAACa,cAAX,GAA4B,KAA5B;AACH;;AACD,MAAGJ,YAAY,CAACK,MAAb,GAAsB,CAAtB,IAA2B,CAACH,YAAY,CAACP,IAAb,CAAkBK,YAAlB,CAA/B,EAA+D;AAC3DT,IAAAA,UAAU,CAACe,cAAX,GAA4B,KAA5B;AACH;;AACD,MAAG,CAACd,gBAAgB,CAACG,IAAjB,CAAsBhB,IAAtB,CAAJ,EAAgC;AAC5BY,IAAAA,UAAU,CAACgB,SAAX,GAAuB,KAAvB;AACH;;AACD,MAAG3B,KAAK,KAAK,MAAb,EAAoB;AAChBW,IAAAA,UAAU,CAACiB,UAAX,GAAwB,KAAxB;AACH;;AACD,MAAG,CAACP,YAAY,CAACN,IAAb,CAAkBd,OAAlB,CAAJ,EAA+B;AAC3BU,IAAAA,UAAU,CAACkB,YAAX,GAA0B,KAA1B;AACH;AACJ,CAnBM,C,CAqBP;;AACA,OAAO,MAAMC,eAAe,GAAG,CAACC,KAAD,EAASC,IAAT,EAAgBrB,UAAhB,KAA+B;AAC1D,QAAMsB,UAAU,GAAG,IAAIpB,MAAJ,CAAWtB,SAAS,CAACW,WAArB,CAAnB;AACA,QAAMgC,SAAS,GAAG,IAAIrB,MAAJ,CAAWtB,SAAS,CAACY,WAArB,CAAlB;;AACA,MAAG,CAAC8B,UAAU,CAAClB,IAAX,CAAgBgB,KAAhB,CAAJ,EAA2B;AACvBpB,IAAAA,UAAU,CAACwB,UAAX,GAAwB,KAAxB;AACH;;AACD,MAAG,CAACD,SAAS,CAACnB,IAAV,CAAeiB,IAAf,CAAJ,EAAyB;AACrBrB,IAAAA,UAAU,CAACyB,SAAX,GAAuB,KAAvB;AACH;AACJ,CATM","sourcesContent":["import { regexList } from './constants';\r\nimport { inputIds } from './constants';\r\n\r\n/**\r\n * Collects user input from registration form\r\n * @returns {Object}  User data object (key - input field , value - user input)\r\n */\r\nexport const getUserInput = () => {\r\n    var userInputs = {\r\n        firstName : \"\" , \r\n        lastName : \"\" , \r\n        firstAddress : \"\" , \r\n        secondAddress : \"\" ,\r\n        city : \"\" ,\r\n        state : \"\" ,\r\n        zipCode : \"\" ,\r\n        phoneNumber : \"\" ,\r\n        mailAddress : \"\" ,\r\n    };\r\n    inputIds.map((currentInputField , _) => {\r\n        userInputs[currentInputField] = document.getElementById(currentInputField).value;\r\n    });\r\n    return userInputs;\r\n}    \r\n\r\n/**\r\n * Validates the name section of the form\r\n * @param {String} firstName User input for the first name field\r\n * @param {String} lastName \r\n * @param {*} validInput \r\n */\r\nexport const validateName = (firstName , lastName , validInput) => {\r\n    const onlyLettersRegex = new RegExp(regexList.onlyLetters);\r\n    if(!onlyLettersRegex.test(firstName)){\r\n        validInput.validFirstName = false;\r\n    }\r\n    if(!onlyLettersRegex.test(lastName)){\r\n        validInput.validLastName = false;\r\n    }\r\n}\r\n\r\n//function that validates the address section of the form\r\nexport const validateAddress = (addressLine1 , addressLine2 , city , state , zipCode , validInput) => {\r\n    const onlyLettersRegex = new RegExp(regexList.onlyLetters);\r\n    const zipCodeRegex = new RegExp(regexList.zipCode);\r\n    const addressRegex = new RegExp(regexList.address);\r\n    if(!addressRegex.test(addressLine1)){\r\n        validInput.validAddrLine1 = false;\r\n    }\r\n    if(addressLine2.length > 0 && !addressRegex.test(addressLine2)){\r\n        validInput.validAddrLine2 = false;\r\n    }\r\n    if(!onlyLettersRegex.test(city)){\r\n        validInput.validCity = false;\r\n    }\r\n    if(state === 'true'){\r\n        validInput.validState = false;\r\n    }\r\n    if(!zipCodeRegex.test(zipCode)){\r\n        validInput.validZipCode = false;\r\n    }\r\n}\r\n\r\n//function that validates the contact section of the form\r\nexport const validateContact = (phone , mail , validInput) => {\r\n    const phoneRegex = new RegExp(regexList.phoneNumber);\r\n    const mailRegex = new RegExp(regexList.mailAddress);\r\n    if(!phoneRegex.test(phone)){\r\n        validInput.validPhone = false;\r\n    }\r\n    if(!mailRegex.test(mail)){\r\n        validInput.validMail = false;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}