{"ast":null,"code":"//Component that allows the user to input their address\nimport React from'react';import{states}from'../constants';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";/**\r\n * Displays an error message based on the subaddress input field\r\n * @param {String} subAddressType Name of the input field (\"City / Zip code\")\r\n * @returns h1\r\n */var switchErrorMsg=function switchErrorMsg(subAddressType){if(subAddressType===\"City\"){return/*#__PURE__*/_jsx(\"h1\",{className:\"w-full h-1/3 \\r text-red text-xl screen-l:text-lg screen-2xl:text-3xl \\r italic font-extrabold pt-5 px-5\",children:\"City name should contain only letters!\"});}else{return/*#__PURE__*/_jsx(\"h1\",{className:\"w-full h-1/3 text-red text-xl screen-l:text-lg screen-2xl:text-3xl \\r italic font-extrabold pt-5 px-5\",children:\"Please provide valid zip code!\"});}};var SubAddressField=function SubAddressField(props){{/* Conditional rendering based on the type of subaddress user input field */}{/* State select box */}if(props.name===\"State\"){return/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col justify-center h-full w-1/3 px-5\",children:[/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"\".concat(props.id),className:\"text-2xl screen-2xl:text-3xl text-prussian-blue font-bold\",children:[props.name,\":\",/*#__PURE__*/_jsx(\"span\",{className:\"text-red\",children:\"*\"})]}),/*#__PURE__*/_jsxs(\"select\",{id:\"\".concat(props.id),className:\"h-1/4 px-3 text-xl font-bold shadow-select-shadow rounded-sm \\n                                \".concat(props.userValidInput===true&&'border-4 border-green rounded-xl'),placeholder:props.name,children:[/*#__PURE__*/_jsx(\"option\",{disabled:true,selected:true,value:true,children:\"State\"}),states.map(function(currentState,key){return/*#__PURE__*/_jsx(\"option\",{id:key,value:currentState,children:currentState});})]}),props.userValidInput===false&&/*#__PURE__*/_jsx(\"h1\",{className:\"w-full h-1/3 text-red text-xl screen-l:text-lg screen-2xl:text-3xl \\r italic font-extrabold pt-5 px-5\",children:\"Please select a state!\"})]});}else{return/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col justify-center h-full w-1/3 px-5\",children:[/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"\".concat(props.id),className:\"text-2xl screen-2xl:text-3xl text-black font-bold\",children:[props.name,\":\",/*#__PURE__*/_jsx(\"span\",{className:\"text-red\",children:\"*\"})]}),/*#__PURE__*/_jsx(\"input\",{id:\"\".concat(props.id),className:\"h-1/4 px-3 text-xl screen-2xl:text-2xl font-bold \\n                                shadow-input-shadow rounded-sm \\n                                \".concat(props.userValidInput===true&&'border-4 border-green rounded-xl'),placeholder:props.name}),props.userValidInput===false&&switchErrorMsg(props.name)]});}};export default SubAddressField;","map":{"version":3,"sources":["C:/React_Projects/ddroidd_internship/webapp/app/src/Form/AdressSection/SubAddressField.jsx"],"names":["React","states","switchErrorMsg","subAddressType","SubAddressField","props","name","id","userValidInput","map","currentState","key"],"mappings":"AAAA;AAEA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,MAAT,KAAuB,cAAvB,C,wFAGA;AACA;AACA;AACA;AACA,GACA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,cAAD,CAAoB,CACvC,GAAGA,cAAc,GAAK,MAAtB,CAA6B,CACzB,mBACI,WAAI,SAAS,CAAC,0GAAd,oDADJ,CAOH,CARD,IAQK,CACD,mBACI,WAAI,SAAS,CAAC,uGAAd,4CADJ,CAMH,CACJ,CAjBD,CAmBA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,CAAW,CAE/B,CAAC,4EAA6E,CAE9E,CAAC,sBAAuB,CACxB,GAAGA,KAAK,CAACC,IAAN,GAAe,OAAlB,CAA0B,CACtB,mBACI,aAAK,SAAS,CAAC,gDAAf,wBACI,eACI,OAAO,WAAOD,KAAK,CAACE,EAAb,CADX,CAEI,SAAS,CAAC,2DAFd,WAGSF,KAAK,CAACC,IAHf,kBAGqB,aAAM,SAAS,CAAC,UAAhB,eAHrB,GADJ,cAMI,gBACI,EAAE,WAAOD,KAAK,CAACE,EAAb,CADN,CAEI,SAAS,0GACKF,KAAK,CAACG,cAAN,GAAyB,IAAzB,EAAiC,kCADtC,CAFb,CAII,WAAW,CAAEH,KAAK,CAACC,IAJvB,wBAKQ,eAAQ,QAAQ,KAAhB,CAAiB,QAAQ,KAAzB,CAA0B,KAAK,KAA/B,mBALR,CAMSL,MAAM,CAACQ,GAAP,CAAW,SAACC,YAAD,CAAgBC,GAAhB,CAAwB,CAChC,mBACI,eAAQ,EAAE,CAAIA,GAAd,CAAmB,KAAK,CAAID,YAA5B,UAA2CA,YAA3C,EADJ,CAGH,CAJA,CANT,GANJ,CAmBKL,KAAK,CAACG,cAAN,GAAyB,KAAzB,eACG,WAAI,SAAS,CAAC,uGAAd,oCApBR,GADJ,CA4BH,CA7BD,IA6BK,CACD,mBACI,aAAK,SAAS,CAAC,gDAAf,wBACI,eACI,OAAO,WAAOH,KAAK,CAACE,EAAb,CADX,CAEI,SAAS,CAAC,mDAFd,WAGSF,KAAK,CAACC,IAHf,kBAGqB,aAAM,SAAS,CAAC,UAAhB,eAHrB,GADJ,cAMI,cACI,EAAE,WAAOD,KAAK,CAACE,EAAb,CADN,CAEI,SAAS,+JAEKF,KAAK,CAACG,cAAN,GAAyB,IAAzB,EAAiC,kCAFtC,CAFb,CAKI,WAAW,CAAEH,KAAK,CAACC,IALvB,EANJ,CAcKD,KAAK,CAACG,cAAN,GAAyB,KAAzB,EAAkCN,cAAc,CAACG,KAAK,CAACC,IAAP,CAdrD,GADJ,CAkBH,CACJ,CAtDD,CA8DA,cAAeF,CAAAA,eAAf","sourcesContent":["//Component that allows the user to input their address\r\n\r\nimport React from 'react'\r\nimport { states } from '../constants';\r\nimport propTypes from 'prop-types';\r\n\r\n/**\r\n * Displays an error message based on the subaddress input field\r\n * @param {String} subAddressType Name of the input field (\"City / Zip code\")\r\n * @returns h1\r\n */\r\nconst switchErrorMsg = (subAddressType) => {\r\n    if(subAddressType === \"City\"){\r\n        return (\r\n            <h1 className='w-full h-1/3 \r\n                        text-red text-xl screen-l:text-lg screen-2xl:text-3xl \r\n                        italic font-extrabold pt-5 px-5'>\r\n                City name should contain only letters!\r\n            </h1>\r\n        );\r\n    }else{\r\n        return (\r\n            <h1 className='w-full h-1/3 text-red text-xl screen-l:text-lg screen-2xl:text-3xl \r\n                            italic font-extrabold pt-5 px-5'>\r\n                Please provide valid zip code!\r\n            </h1>\r\n        );\r\n    }\r\n}\r\n\r\nconst SubAddressField = (props) => {\r\n\r\n    {/* Conditional rendering based on the type of subaddress user input field */}\r\n\r\n    {/* State select box */}\r\n    if(props.name === \"State\"){\r\n        return(\r\n            <div className='flex flex-col justify-center h-full w-1/3 px-5'>\r\n                <label \r\n                    htmlFor = {`${props.id}`} \r\n                    className='text-2xl screen-2xl:text-3xl text-prussian-blue font-bold'>\r\n                        {props.name}:<span className='text-red'>*</span>\r\n                </label>\r\n                <select \r\n                    id = {`${props.id}`} \r\n                    className= {`h-1/4 px-3 text-xl font-bold shadow-select-shadow rounded-sm \r\n                                ${props.userValidInput === true && 'border-4 border-green rounded-xl'}`} \r\n                    placeholder={props.name}>\r\n                        <option disabled selected value>State</option>\r\n                        {states.map((currentState , key) => {\r\n                            return(\r\n                                <option id = {key} value = {currentState}>{currentState}</option>\r\n                            )\r\n                        })}\r\n                </select>\r\n                {/* Custom error message if user did not select a state */}\r\n                {props.userValidInput === false && \r\n                    <h1 className='w-full h-1/3 text-red text-xl screen-l:text-lg screen-2xl:text-3xl \r\n                                   italic font-extrabold pt-5 px-5'>\r\n                        Please select a state!\r\n                    </h1>\r\n                }\r\n            </div>\r\n        );\r\n    }else{\r\n        return(\r\n            <div className='flex flex-col justify-center h-full w-1/3 px-5'>\r\n                <label \r\n                    htmlFor = {`${props.id}`} \r\n                    className='text-2xl screen-2xl:text-3xl text-black font-bold'>\r\n                        {props.name}:<span className='text-red'>*</span>\r\n                </label>\r\n                <input \r\n                    id = {`${props.id}`} \r\n                    className= {`h-1/4 px-3 text-xl screen-2xl:text-2xl font-bold \r\n                                shadow-input-shadow rounded-sm \r\n                                ${props.userValidInput === true && 'border-4 border-green rounded-xl'}`} \r\n                    placeholder={props.name}\r\n                />\r\n                {/* Custom error message based on the subaddress input field type */}\r\n                {props.userValidInput === false && switchErrorMsg(props.name)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nSubAddressField.propTypes = {\r\n    name : propTypes.string.isRequired ,\r\n    id : propTypes.string.isRequired , \r\n    userValidInput : propTypes.bool.isRequired\r\n}\r\n\r\nexport default SubAddressField;"]},"metadata":{},"sourceType":"module"}