{"ast":null,"code":"//File where we store functions that take part in user validation process\nimport{regexList}from'./constants';import{inputIds}from'./constants';/**\r\n * Collects user input from registration form\r\n * @returns {Object}  User data object (key - input field , value - user input)\r\n */export var getUserInput=function getUserInput(){var userInputs={firstName:\"\",lastName:\"\",firstAddress:\"\",secondAddress:\"\",city:\"\",state:\"\",zipCode:\"\",phoneNumber:\"\",mailAddress:\"\"};inputIds.map(function(currentInputField,_){userInputs[currentInputField]=document.getElementById(currentInputField).value;});return userInputs;};/**\r\n * Validates the name section of the form\r\n * @param {String} firstName User input for the First Name field\r\n * @param {String} lastName  User input for the Last Name field\r\n * @param {Object} validInput Object in which we store the name validation status based on regex check\r\n */export var validateName=function validateName(firstName,lastName,validInput){var onlyLettersRegex=new RegExp(regexList.onlyLetters);if(!onlyLettersRegex.test(firstName)){validInput.validFirstName=false;}if(!onlyLettersRegex.test(lastName)){validInput.validLastName=false;}};/**\r\n * Validates the address section of the form\r\n * @param {String} addressLine1 User input for the Address Line 1 field\r\n * @param {String} addressLine2 User input for the Address Line 2 field\r\n * @param {String} city User input for the City field\r\n * @param {String | true} state User input for the State field\r\n * @param {String} zipCode User input for the Zip code field\r\n * @param {Object} validInput Object in which we store the address validation status based on regex check\r\n */export var validateAddress=function validateAddress(addressLine1,addressLine2,city,state,zipCode,validInput){var onlyLettersRegex=new RegExp(regexList.onlyLetters);var zipCodeRegex=new RegExp(regexList.zipCode);var addressRegex=new RegExp(regexList.address);if(!addressRegex.test(addressLine1)){validInput.validAddrLine1=false;}if(addressLine2.length>0&&!addressRegex.test(addressLine2)){validInput.validAddrLine2=false;}if(!onlyLettersRegex.test(city)){validInput.validCity=false;}if(state==='true'){validInput.validState=false;}if(!zipCodeRegex.test(zipCode)){validInput.validZipCode=false;}};/**\r\n * Validates the contact section of the form\r\n * @param {String} phone User input for the Phone number field\r\n * @param {String} mail User input for the Email address\r\n * @param {Object} validInput Object in which we store the contact validation status based on regex check\r\n */export var validateContact=function validateContact(phone,mail,validInput){var phoneRegex=new RegExp(regexList.phoneNumber);var mailRegex=new RegExp(regexList.mailAddress);if(!phoneRegex.test(phone)){validInput.validPhone=false;}if(!mailRegex.test(mail)){validInput.validMail=false;}};","map":{"version":3,"sources":["C:/React_Projects/ddroidd_internship/webapp/app/src/Form/userValidation.js"],"names":["regexList","inputIds","getUserInput","userInputs","firstName","lastName","firstAddress","secondAddress","city","state","zipCode","phoneNumber","mailAddress","map","currentInputField","_","document","getElementById","value","validateName","validInput","onlyLettersRegex","RegExp","onlyLetters","test","validFirstName","validLastName","validateAddress","addressLine1","addressLine2","zipCodeRegex","addressRegex","address","validAddrLine1","length","validAddrLine2","validCity","validState","validZipCode","validateContact","phone","mail","phoneRegex","mailRegex","validPhone","validMail"],"mappings":"AAAA;AAEA,OAASA,SAAT,KAA0B,aAA1B,CACA,OAASC,QAAT,KAAyB,aAAzB,CAEA;AACA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CAC9B,GAAIC,CAAAA,UAAU,CAAG,CACbC,SAAS,CAAG,EADC,CAEbC,QAAQ,CAAG,EAFE,CAGbC,YAAY,CAAG,EAHF,CAIbC,aAAa,CAAG,EAJH,CAKbC,IAAI,CAAG,EALM,CAMbC,KAAK,CAAG,EANK,CAObC,OAAO,CAAG,EAPG,CAQbC,WAAW,CAAG,EARD,CASbC,WAAW,CAAG,EATD,CAAjB,CAWAX,QAAQ,CAACY,GAAT,CAAa,SAACC,iBAAD,CAAqBC,CAArB,CAA2B,CACpCZ,UAAU,CAACW,iBAAD,CAAV,CAAgCE,QAAQ,CAACC,cAAT,CAAwBH,iBAAxB,EAA2CI,KAA3E,CACH,CAFD,EAGA,MAAOf,CAAAA,UAAP,CACH,CAhBM,CAkBP;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMgB,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACf,SAAD,CAAaC,QAAb,CAAwBe,UAAxB,CAAuC,CAC/D,GAAMC,CAAAA,gBAAgB,CAAG,GAAIC,CAAAA,MAAJ,CAAWtB,SAAS,CAACuB,WAArB,CAAzB,CACA,GAAG,CAACF,gBAAgB,CAACG,IAAjB,CAAsBpB,SAAtB,CAAJ,CAAqC,CACjCgB,UAAU,CAACK,cAAX,CAA4B,KAA5B,CACH,CACD,GAAG,CAACJ,gBAAgB,CAACG,IAAjB,CAAsBnB,QAAtB,CAAJ,CAAoC,CAChCe,UAAU,CAACM,aAAX,CAA2B,KAA3B,CACH,CACJ,CARM,CAUP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,YAAD,CAAgBC,YAAhB,CAA+BrB,IAA/B,CAAsCC,KAAtC,CAA8CC,OAA9C,CAAwDU,UAAxD,CAAuE,CAClG,GAAMC,CAAAA,gBAAgB,CAAG,GAAIC,CAAAA,MAAJ,CAAWtB,SAAS,CAACuB,WAArB,CAAzB,CACA,GAAMO,CAAAA,YAAY,CAAG,GAAIR,CAAAA,MAAJ,CAAWtB,SAAS,CAACU,OAArB,CAArB,CACA,GAAMqB,CAAAA,YAAY,CAAG,GAAIT,CAAAA,MAAJ,CAAWtB,SAAS,CAACgC,OAArB,CAArB,CACA,GAAG,CAACD,YAAY,CAACP,IAAb,CAAkBI,YAAlB,CAAJ,CAAoC,CAChCR,UAAU,CAACa,cAAX,CAA4B,KAA5B,CACH,CACD,GAAGJ,YAAY,CAACK,MAAb,CAAsB,CAAtB,EAA2B,CAACH,YAAY,CAACP,IAAb,CAAkBK,YAAlB,CAA/B,CAA+D,CAC3DT,UAAU,CAACe,cAAX,CAA4B,KAA5B,CACH,CACD,GAAG,CAACd,gBAAgB,CAACG,IAAjB,CAAsBhB,IAAtB,CAAJ,CAAgC,CAC5BY,UAAU,CAACgB,SAAX,CAAuB,KAAvB,CACH,CACD,GAAG3B,KAAK,GAAK,MAAb,CAAoB,CAChBW,UAAU,CAACiB,UAAX,CAAwB,KAAxB,CACH,CACD,GAAG,CAACP,YAAY,CAACN,IAAb,CAAkBd,OAAlB,CAAJ,CAA+B,CAC3BU,UAAU,CAACkB,YAAX,CAA0B,KAA1B,CACH,CACJ,CAnBM,CAqBP;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,CAASC,IAAT,CAAgBrB,UAAhB,CAA+B,CAC1D,GAAMsB,CAAAA,UAAU,CAAG,GAAIpB,CAAAA,MAAJ,CAAWtB,SAAS,CAACW,WAArB,CAAnB,CACA,GAAMgC,CAAAA,SAAS,CAAG,GAAIrB,CAAAA,MAAJ,CAAWtB,SAAS,CAACY,WAArB,CAAlB,CACA,GAAG,CAAC8B,UAAU,CAAClB,IAAX,CAAgBgB,KAAhB,CAAJ,CAA2B,CACvBpB,UAAU,CAACwB,UAAX,CAAwB,KAAxB,CACH,CACD,GAAG,CAACD,SAAS,CAACnB,IAAV,CAAeiB,IAAf,CAAJ,CAAyB,CACrBrB,UAAU,CAACyB,SAAX,CAAuB,KAAvB,CACH,CACJ,CATM","sourcesContent":["//File where we store functions that take part in user validation process\r\n\r\nimport { regexList } from './constants';\r\nimport { inputIds } from './constants';\r\n\r\n/**\r\n * Collects user input from registration form\r\n * @returns {Object}  User data object (key - input field , value - user input)\r\n */\r\nexport const getUserInput = () => {\r\n    var userInputs = {\r\n        firstName : \"\" , \r\n        lastName : \"\" , \r\n        firstAddress : \"\" , \r\n        secondAddress : \"\" ,\r\n        city : \"\" ,\r\n        state : \"\" ,\r\n        zipCode : \"\" ,\r\n        phoneNumber : \"\" ,\r\n        mailAddress : \"\" ,\r\n    };\r\n    inputIds.map((currentInputField , _) => {\r\n        userInputs[currentInputField] = document.getElementById(currentInputField).value;\r\n    });\r\n    return userInputs;\r\n}    \r\n\r\n/**\r\n * Validates the name section of the form\r\n * @param {String} firstName User input for the First Name field\r\n * @param {String} lastName  User input for the Last Name field\r\n * @param {Object} validInput Object in which we store the name validation status based on regex check\r\n */\r\nexport const validateName = (firstName , lastName , validInput) => {\r\n    const onlyLettersRegex = new RegExp(regexList.onlyLetters);\r\n    if(!onlyLettersRegex.test(firstName)){\r\n        validInput.validFirstName = false;\r\n    }\r\n    if(!onlyLettersRegex.test(lastName)){\r\n        validInput.validLastName = false;\r\n    }\r\n}\r\n\r\n/**\r\n * Validates the address section of the form\r\n * @param {String} addressLine1 User input for the Address Line 1 field\r\n * @param {String} addressLine2 User input for the Address Line 2 field\r\n * @param {String} city User input for the City field\r\n * @param {String | true} state User input for the State field\r\n * @param {String} zipCode User input for the Zip code field\r\n * @param {Object} validInput Object in which we store the address validation status based on regex check\r\n */\r\nexport const validateAddress = (addressLine1 , addressLine2 , city , state , zipCode , validInput) => {\r\n    const onlyLettersRegex = new RegExp(regexList.onlyLetters);\r\n    const zipCodeRegex = new RegExp(regexList.zipCode);\r\n    const addressRegex = new RegExp(regexList.address);\r\n    if(!addressRegex.test(addressLine1)){\r\n        validInput.validAddrLine1 = false;\r\n    }\r\n    if(addressLine2.length > 0 && !addressRegex.test(addressLine2)){\r\n        validInput.validAddrLine2 = false;\r\n    }\r\n    if(!onlyLettersRegex.test(city)){\r\n        validInput.validCity = false;\r\n    }\r\n    if(state === 'true'){\r\n        validInput.validState = false;\r\n    }\r\n    if(!zipCodeRegex.test(zipCode)){\r\n        validInput.validZipCode = false;\r\n    }\r\n}\r\n\r\n/**\r\n * Validates the contact section of the form\r\n * @param {String} phone User input for the Phone number field\r\n * @param {String} mail User input for the Email address\r\n * @param {Object} validInput Object in which we store the contact validation status based on regex check\r\n */\r\nexport const validateContact = (phone , mail , validInput) => {\r\n    const phoneRegex = new RegExp(regexList.phoneNumber);\r\n    const mailRegex = new RegExp(regexList.mailAddress);\r\n    if(!phoneRegex.test(phone)){\r\n        validInput.validPhone = false;\r\n    }\r\n    if(!mailRegex.test(mail)){\r\n        validInput.validMail = false;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}