[{"C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\index.js":"1","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\App.js":"2","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\NavBar\\NavBar.jsx":"3","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Landing\\Landing.jsx":"4","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Landing\\InfoLanding.jsx":"5","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Footer\\Footer.jsx":"6","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Submit\\Submit.jsx":"7","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Submit\\InfoSubmit.jsx":"8","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\Form.jsx":"9","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\InfoForm.jsx":"10","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\constants.js":"11","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\userValidation.js":"12","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\NameSection\\NameSection.jsx":"13","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\NameSection\\NameField.jsx":"14","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\FormTitle.jsx":"15","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\AdressSection\\AdressSection.jsx":"16","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\AdressSection\\AddressField.jsx":"17","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\AdressSection\\SubAddressField.jsx":"18","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\ContactSection\\ContactSection.jsx":"19","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\ContactSection\\ContactField.jsx":"20"},{"size":218,"mtime":1640133448318,"results":"21","hashOfConfig":"22"},{"size":508,"mtime":1640181187486,"results":"23","hashOfConfig":"22"},{"size":2477,"mtime":1640340407545,"results":"24","hashOfConfig":"22"},{"size":560,"mtime":1640265204150,"results":"25","hashOfConfig":"22"},{"size":2056,"mtime":1640340506085,"results":"26","hashOfConfig":"22"},{"size":709,"mtime":1640283504036,"results":"27","hashOfConfig":"22"},{"size":598,"mtime":1640265217990,"results":"28","hashOfConfig":"22"},{"size":677,"mtime":1640283393156,"results":"29","hashOfConfig":"22"},{"size":581,"mtime":1640298875027,"results":"30","hashOfConfig":"22"},{"size":5060,"mtime":1640301894224,"results":"31","hashOfConfig":"22"},{"size":2295,"mtime":1640268164574,"results":"32","hashOfConfig":"22"},{"size":3268,"mtime":1640267541010,"results":"33","hashOfConfig":"22"},{"size":561,"mtime":1640301561746,"results":"34","hashOfConfig":"22"},{"size":1316,"mtime":1640300067499,"results":"35","hashOfConfig":"22"},{"size":538,"mtime":1640300365940,"results":"36","hashOfConfig":"22"},{"size":1531,"mtime":1640301591660,"results":"37","hashOfConfig":"22"},{"size":1505,"mtime":1640301656276,"results":"38","hashOfConfig":"22"},{"size":3803,"mtime":1640340655293,"results":"39","hashOfConfig":"22"},{"size":1130,"mtime":1640301576591,"results":"40","hashOfConfig":"22"},{"size":2117,"mtime":1640301764721,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"taouo8",{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\index.js",[],["90","91"],"C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\App.js",[],"C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\NavBar\\NavBar.jsx",["92"],"//Component that displays at the top of every page in the application\r\n//Contains the ddroidd logo , text that sugests the main theme of the application and a register button(opt) \r\n\r\nimport React from 'react';\r\nimport propTypes from 'prop-types';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst DdroiddLogo = process.env.REACT_APP_DDROIDD_LOGO;\r\n\r\nconst NavBar = (props) =>{\r\n\r\n    let routing = useHistory();\r\n\r\n    return(\r\n        <div className='w-screen h-screen-10% bg-prussian-blue flex justify-evenly items-center'>\r\n            <img src = {`${DdroiddLogo}`}\r\n                className={`w-1/3 h-full screen-phones:h-1/3 screen-tablets:h-2/3 pr-48 screen-phones:pr-0 screen-tablets:pr-12 screen-s:pr-24 \r\n                ${props.clickableLogo && 'cursor-pointer'}`}\r\n                onClick = {() => {routing.push('./')}} />\r\n            <div className='w-1/3 h-full bg-athens-black flex items-center justify-center select-none'>\r\n                <h1 className='text-7xl screen-phones:text-nav-title-phones screen-tablets:text-nav-title-tablets \r\n                               screen-s:text-4xl screen-m:text-5xl screen-l:text-6xl screen-xl:text-7xl screen-2xl:text-9xl \r\n                             text-white font-semibold tracking-wide'>\r\n                  Winter Internship\r\n                </h1>\r\n            </div>\r\n            <div className='w-1/3 h-full flex justify-center items-center pl-48 screen-phones:pl-0 screen-tablets:pl-12 screen-s:pl-24'>\r\n                {props.displayButton && \r\n                <button \r\n                    className='w-1/4 h-1/3 bg-school-bus-yellow text-xl font-bold text-center border-solid border-2 border-dove-gray \r\n                    shadow-lg animation ease-in-out duration-500 transform hover:scale-110' \r\n                    onClick={() => {routing.push('./form')}}>\r\n                        <h1 className='text-2xl screen-phones:text-nav-button-phones screen-tablets:text-nav-button-tablets \r\n                                       screen-s:text-xs screen-m:text-sm screen-l:text-xl screen-xl:text-3xl screen-2xl:text-4xl \r\n                                       tracking-wide text-prussian-blue font-extrabold'>\r\n                            Join Us\r\n                        </h1>\r\n                </button>}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nNavBar.propTypes = {\r\n    clickableLogo : propTypes.bool.isRequired ,\r\n    displayButton : propTypes.bool.isRequired\r\n}\r\n\r\nexport default NavBar;","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Landing\\Landing.jsx",[],"C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Landing\\InfoLanding.jsx",["93","94"],"//Component that is displayed in the center of the Landing page\r\n//It contains an images section and a register button\r\n\r\nimport React from 'react'\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst DestructuringImage = process.env.REACT_APP_DESTRUCTURING;\r\nconst WebpageLogo = process.env.REACT_APP_WEBPAGE_LOGO;\r\n\r\nconst InfoLanding = () => {\r\n\r\n    let routing = useHistory();\r\n\r\n    return(\r\n        <div className='relative inset-x-center-section h-screen-80% w-2/3 bg-athens-gray grid grid-areas-landing-layout-info'>\r\n            <div className='grid grid-in-top-section'/>\r\n            <div className='grid grid-in-middle-section'>\r\n                <div className='flex justify-between items-center ml-10'>\r\n                    <img src={`${DestructuringImage}`}\r\n                        className='w-2/3 h-1/2' /> \r\n                    <img src={`${WebpageLogo}`}\r\n                        className='w-1/3 h-1/2' />\r\n                </div>\r\n            </div>\r\n            <div className='grid grid-in-bottom-section'>\r\n                <div className='flex justify-center'>\r\n                    <button \r\n                        className='w-1/4 h-1/3 screen-phones:h-1/5 screen-tablets:h-1/4 \r\n                                   text-center bg-school-bus-yellow -mt-5 border-solid border-2 border-dove-gray \r\n                                   shadow-button-shadow animation ease-in-out duration-500 transform hover:scale-110' \r\n                        onClick = {() => {routing.push('./form')}}>\r\n                            <h1 className='text-2xl screen-phones:text-info-section-button screen-tablets:text-xs \r\n                                           screen-s:text-sm screen-m:text-base screen-3xl:text-3xl screen-2xl:text-4xl \r\n                                           text-prussian-blue font-extrabold tracking-wide '>\r\n                                    Join Us\r\n                            </h1>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InfoLanding;","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Footer\\Footer.jsx",[],"C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Submit\\Submit.jsx",[],"C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Submit\\InfoSubmit.jsx",[],"C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\Form.jsx",[],"C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\InfoForm.jsx",["95"],"//Component that allows the user to register into ddroidd Winter Internship\r\n//Contains NameField , AddressField , SubAddressField , ContactField and ReCAPTCHA as child components\r\n\r\nimport React from 'react'\r\nimport FormTitle from './FormTitle';\r\nimport NameSection from './NameSection/NameSection';\r\nimport AdressSection from './AdressSection/AdressSection';\r\nimport ContactSection from './ContactSection/ContactSection';\r\nimport ReCAPTCHA from \"react-google-recaptcha\"\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useState } from 'react';\r\nimport { getUserInput , validateName , validateAddress , validateContact } from './userValidation';\r\nimport { getStateObject } from './constants';\r\n\r\nconst CAPTCHA_API_KEY = process.env.REACT_APP_CAPTCHA_API_KEY;\r\nconst recaptchaRef = React.createRef();\r\n\r\nconst InfoForm = () => {\r\n\r\n    let routing = useHistory();\r\n\r\n    //state object for the form validation\r\n    const [validInput , setValidInput] = useState(getStateObject(null));\r\n\r\n    /**\r\n     * Validates user input and redirects him if the data is valid or displays error messages else\r\n     */\r\n    const validateUserInput = () => {\r\n        const {firstName , lastName , firstAddress , secondAddress , city , state , zipCode , phoneNumber , mailAddress} = getUserInput();\r\n        var validInput = getStateObject(true);\r\n\r\n        //validating each field in the form\r\n        validateName(firstName , lastName , validInput);\r\n        validateAddress(firstAddress , secondAddress , city , state , zipCode , validInput);\r\n        validateContact(phoneNumber , mailAddress , validInput);\r\n\r\n        //validating the captcha check\r\n        const recaptchaValue = recaptchaRef.current.getValue();\r\n        if(!(recaptchaValue.length > 0)){\r\n            validInput.validCaptcha = false;\r\n        }\r\n\r\n        //check if the user data is valid \r\n        var validUser = true;\r\n        for(const [_ , value] of Object.entries(validInput)){\r\n            if(value !== true){\r\n                validUser = false;\r\n            }\r\n        }\r\n        if(validUser){\r\n            //redirecting user to Submit page\r\n            routing.push({\r\n                pathname : '/submit',\r\n                //saving user data input for further processing\r\n                state : {\r\n                    firstName : firstName ,\r\n                    lastName : lastName ,\r\n                    firstAddress : firstAddress ,\r\n                    secondAddress : secondAddress , \r\n                    city : city , \r\n                    state : state ,\r\n                    zipCode : zipCode ,\r\n                    phoneNumber : phoneNumber , \r\n                    mailAddress : mailAddress\r\n                 }\r\n            });\r\n        }\r\n        setValidInput(validInput);\r\n    }\r\n\r\n    return(\r\n        <div className='w-2/3 screen-l:h-form-l h-form-2xl relative inset-x-center-section bg-athens-gray'>\r\n            <div className='grid grid-areas-form-layout bg-athens-gray h-full w-2/3 relative inset-x-center-section'>\r\n                <FormTitle />\r\n                <NameSection validFirstName = {validInput.validFirstName} validLastName = {validInput.validLastName}/>\r\n                <AdressSection \r\n                    validAddrLine1 = {validInput.validAddrLine1}\r\n                    validAddrLine2 = {validInput.validAddrLine2}\r\n                    validCity = {validInput.validCity}\r\n                    validState = {validInput.validState}\r\n                    validZipCode = {validInput.validZipCode}\r\n                />\r\n                <ContactSection validPhone = {validInput.validPhone} validMail = {validInput.validMail} />\r\n                {/* Form submit section */}\r\n                <div className='grid grid-in-submit screen-l:mb-28 screen-xl:mb-40 screen-2xl:mb-52'>\r\n                    <div className='flex justify-between items-center px-5'>\r\n                        <div className='flex flex-col items-center justify-center h-1/2 w-1/2'>\r\n                            <ReCAPTCHA \r\n                                sitekey={`${CAPTCHA_API_KEY}`}\r\n                                ref={recaptchaRef}\r\n                                theme='dark'\r\n                            />\r\n                            {validInput.validCaptcha === false && \r\n                                <h1 className='w-full h-1/3 mt-4 font-extrabold text-xl text-red italic'>\r\n                                    Please check the captcha\r\n                                </h1>\r\n                            }\r\n                        </div>\r\n                        <button \r\n                            className='h-1/4 w-1/3 bg-school-bus-yellow border animation ease-in-out duration-500 transform hover:scale-110 shadow-button-shadow' \r\n                            onClick = {() => {validateUserInput()}}>\r\n                                <h1 className='text-3xl font-bold text-prussian-blue'>Join Us</h1>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InfoForm;","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\constants.js",["96","97","98","99","100"],"//List of all the states in Romania , ordered alphabetically\r\nexport const states = ['Alba' , 'Arad' , 'Argeș' , 'Bacău' , 'Bihor' , 'Bistrița-Năsăud' , 'Botoșani' , 'Brăila' , 'Brașov' , 'București' ,  'Buzău' , 'Călărași' ,\r\n                 'Caraș-Severin' , 'Cluj' , 'Constanța' , 'Covasna' , 'Dâmbovița' , 'Dolj' , 'Galați' , 'Giurgiu' , 'Gorj' , 'Harghita' , 'Hunedoara' ,\r\n                 'Ialomița' , 'Iași' , 'Ilfov' , 'Maramureș' , 'Mehedinți' , 'Mureș' , 'Neamț' , 'Olt' , 'Prahova' , 'Sălaj' , 'Satu Mare' , 'Sibiu' ,\r\n                 'Suceava' , 'Teleorman' , 'Timiș' , 'Tulcea' , 'Vâlcea' , 'Vaslui' , 'Vrancea'];\r\n\r\n//List of all regexes used for user input validation\r\nexport const regexList = {\r\n    //regex that matches letters , diacritics and whitespaces\r\n    onlyLetters : \"^[a-zA-ZÀ-ž- ]+$\" ,\r\n    //regex that matches letters , digits and whitespaces (min 1 of each)\r\n    address : \"^(?:[0-9 ]+[a-zA-ZÀ-ž ]|[a-zA-ZÀ-ž ]+[0-9 ])[a-zA-ZÀ-ž0-9 ]*$\" ,\r\n    //regex that matches a sequence of exact 6 digits\r\n    zipCode : \"^[0-9]{6}$\" ,\r\n    //regex that matches a valid phone number\r\n    phoneNumber : \"^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$\" ,\r\n    //regex that matches a valid mail address (only (A-Za-z0-9_!#$%&'*+/=?`{|}~^.-) before the @ and only (A-Za-z.-) after that)\r\n    mailAddress : \"^[A-Za-z0-9_!#$%&'*+/=?`{|}~^.-]+@[A-Za-z.-]+$\"\r\n}\r\n\r\n//List of all ids for the input fields\r\nexport const inputIds = [\"firstName\" , \"lastName\" , \"firstAddress\" , \"secondAddress\" , \"city\" , \"state\" , \"zipCode\" , \"phoneNumber\" , \"mailAddress\"];\r\n\r\n/**\r\n * Returns a validation state object based on a state \r\n * @param {Boolean | null} initialState The value for every key in the object\r\n * @returns {Object}                    Initialized state object\r\n */\r\nexport const getStateObject = (initialState) => {\r\n    return {\r\n        validFirstName : initialState ,\r\n        validLastName : initialState ,\r\n        validAddrLine1 : initialState ,\r\n        validAddrLine2 : initialState ,\r\n        validCity : initialState ,\r\n        validState : initialState ,\r\n        validZipCode : initialState ,\r\n        validPhone : initialState ,\r\n        validMail : initialState ,\r\n        validCaptcha : initialState ,\r\n    }\r\n}\r\n\r\n\r\n","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\userValidation.js",["101"],"//File where we store functions that take part in user validation process\r\n\r\nimport { regexList } from './constants';\r\nimport { inputIds } from './constants';\r\n\r\n/**\r\n * Collects user input from registration form\r\n * @returns {Object}  User data object (key - input field , value - user input)\r\n */\r\nexport const getUserInput = () => {\r\n    var userInputs = {\r\n        firstName : \"\" , \r\n        lastName : \"\" , \r\n        firstAddress : \"\" , \r\n        secondAddress : \"\" ,\r\n        city : \"\" ,\r\n        state : \"\" ,\r\n        zipCode : \"\" ,\r\n        phoneNumber : \"\" ,\r\n        mailAddress : \"\" ,\r\n    };\r\n    inputIds.map((currentInputField , _) => {\r\n        userInputs[currentInputField] = document.getElementById(currentInputField).value;\r\n    });\r\n    return userInputs;\r\n}    \r\n\r\n/**\r\n * Validates the name section of the form\r\n * @param {String} firstName User input for the First Name field\r\n * @param {String} lastName  User input for the Last Name field\r\n * @param {Object} validInput Object in which we store the name validation status based on regex check\r\n */\r\nexport const validateName = (firstName , lastName , validInput) => {\r\n    const onlyLettersRegex = new RegExp(regexList.onlyLetters);\r\n    if(!onlyLettersRegex.test(firstName)){\r\n        validInput.validFirstName = false;\r\n    }\r\n    if(!onlyLettersRegex.test(lastName)){\r\n        validInput.validLastName = false;\r\n    }\r\n}\r\n\r\n/**\r\n * Validates the address section of the form\r\n * @param {String} addressLine1 User input for the Address Line 1 field\r\n * @param {String} addressLine2 User input for the Address Line 2 field\r\n * @param {String} city User input for the City field\r\n * @param {String | true} state User input for the State field\r\n * @param {String} zipCode User input for the Zip code field\r\n * @param {Object} validInput Object in which we store the address validation status based on regex check\r\n */\r\nexport const validateAddress = (addressLine1 , addressLine2 , city , state , zipCode , validInput) => {\r\n    const onlyLettersRegex = new RegExp(regexList.onlyLetters);\r\n    const zipCodeRegex = new RegExp(regexList.zipCode);\r\n    const addressRegex = new RegExp(regexList.address);\r\n    if(!addressRegex.test(addressLine1)){\r\n        validInput.validAddrLine1 = false;\r\n    }\r\n    if(addressLine2.length > 0 && !addressRegex.test(addressLine2)){\r\n        validInput.validAddrLine2 = false;\r\n    }\r\n    if(!onlyLettersRegex.test(city)){\r\n        validInput.validCity = false;\r\n    }\r\n    if(state === 'true'){\r\n        validInput.validState = false;\r\n    }\r\n    if(!zipCodeRegex.test(zipCode)){\r\n        validInput.validZipCode = false;\r\n    }\r\n}\r\n\r\n/**\r\n * Validates the contact section of the form\r\n * @param {String} phone User input for the Phone number field\r\n * @param {String} mail User input for the Email address\r\n * @param {Object} validInput Object in which we store the contact validation status based on regex check\r\n */\r\nexport const validateContact = (phone , mail , validInput) => {\r\n    const phoneRegex = new RegExp(regexList.phoneNumber);\r\n    const mailRegex = new RegExp(regexList.mailAddress);\r\n    if(!phoneRegex.test(phone)){\r\n        validInput.validPhone = false;\r\n    }\r\n    if(!mailRegex.test(mail)){\r\n        validInput.validMail = false;\r\n    }\r\n}","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\NameSection\\NameSection.jsx",[],"C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\NameSection\\NameField.jsx",[],"C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\FormTitle.jsx",[],["102","103"],"C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\AdressSection\\AdressSection.jsx",[],"C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\AdressSection\\AddressField.jsx",[],"C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\AdressSection\\SubAddressField.jsx",["104","105"],"//Component that allows the user to input their address\r\n\r\nimport React from 'react'\r\nimport { states } from '../constants';\r\nimport propTypes from 'prop-types';\r\n\r\n/**\r\n * Displays an error message based on the subaddress input field\r\n * @param {String} subAddressType Name of the input field (\"City / Zip code\")\r\n * @returns h1\r\n */\r\nconst switchErrorMsg = (subAddressType) => {\r\n    if(subAddressType === \"City\"){\r\n        return (\r\n            <h1 className='w-full h-1/3 \r\n                        text-red text-xl screen-l:text-lg screen-2xl:text-3xl \r\n                        italic font-extrabold pt-5 px-5'>\r\n                City name should contain only letters!\r\n            </h1>\r\n        );\r\n    }else{\r\n        return (\r\n            <h1 className='w-full h-1/3 text-red text-xl screen-l:text-lg screen-2xl:text-3xl \r\n                            italic font-extrabold pt-5 px-5'>\r\n                Please provide valid zip code!\r\n            </h1>\r\n        );\r\n    }\r\n}\r\n\r\nconst SubAddressField = (props) => {\r\n\r\n    {/* Conditional rendering based on the type of subaddress user input field */}\r\n\r\n    {/* State select box */}\r\n    if(props.name === \"State\"){\r\n        return(\r\n            <div className='flex flex-col justify-center h-full w-1/3 px-5'>\r\n                <label \r\n                    htmlFor = {`${props.id}`} \r\n                    className='text-2xl screen-2xl:text-3xl text-prussian-blue font-bold'>\r\n                        {props.name}:<span className='text-red'>*</span>\r\n                </label>\r\n                <select \r\n                    id = {`${props.id}`} \r\n                    className= {`h-1/4 px-3 text-xl font-bold shadow-select-shadow rounded-sm \r\n                                ${props.userValidInput === true && 'border-4 border-green rounded-xl'}`} \r\n                    placeholder={props.name}>\r\n                        <option disabled selected value>State</option>\r\n                        {states.map((currentState , key) => {\r\n                            return(\r\n                                <option id = {key} value = {currentState}>{currentState}</option>\r\n                            )\r\n                        })}\r\n                </select>\r\n                {/* Custom error message if user did not select a state */}\r\n                {props.userValidInput === false && \r\n                    <h1 className='w-full h-1/3 text-red text-xl screen-l:text-lg screen-2xl:text-3xl \r\n                                   italic font-extrabold pt-5 px-5'>\r\n                        Please select a state!\r\n                    </h1>\r\n                }\r\n            </div>\r\n        );\r\n    }else{\r\n        return(\r\n            <div className='flex flex-col justify-center h-full w-1/3 px-5'>\r\n                <label \r\n                    htmlFor = {`${props.id}`} \r\n                    className='text-2xl screen-2xl:text-3xl text-black font-bold'>\r\n                        {props.name}:<span className='text-red'>*</span>\r\n                </label>\r\n                <input \r\n                    id = {`${props.id}`} \r\n                    className= {`h-1/4 px-3 text-xl screen-2xl:text-2xl font-bold \r\n                                shadow-input-shadow rounded-sm \r\n                                ${props.userValidInput === true && 'border-4 border-green rounded-xl'}`} \r\n                    placeholder={props.name}\r\n                />\r\n                {/* Custom error message based on the subaddress input field type */}\r\n                {props.userValidInput === false && switchErrorMsg(props.name)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nSubAddressField.propTypes = {\r\n    name : propTypes.string.isRequired ,\r\n    id : propTypes.string.isRequired , \r\n    userValidInput : propTypes.bool.isRequired\r\n}\r\n\r\nexport default SubAddressField;","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\ContactSection\\ContactSection.jsx",[],"C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\ContactSection\\ContactField.jsx",[],{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":16,"column":13,"nodeType":"112","endLine":19,"endColumn":58},{"ruleId":"110","severity":1,"message":"111","line":19,"column":21,"nodeType":"112","endLine":20,"endColumn":51},{"ruleId":"110","severity":1,"message":"111","line":21,"column":21,"nodeType":"112","endLine":22,"endColumn":51},{"ruleId":"113","severity":1,"message":"114","line":45,"column":20,"nodeType":"115","messageId":"116","endLine":45,"endColumn":21},{"ruleId":"117","severity":1,"message":"118","line":16,"column":22,"nodeType":"119","messageId":"120","endLine":16,"endColumn":23,"suggestions":"121"},{"ruleId":"117","severity":1,"message":"122","line":16,"column":44,"nodeType":"119","messageId":"120","endLine":16,"endColumn":45,"suggestions":"123"},{"ruleId":"117","severity":1,"message":"124","line":16,"column":46,"nodeType":"119","messageId":"120","endLine":16,"endColumn":47,"suggestions":"125"},{"ruleId":"117","severity":1,"message":"122","line":16,"column":60,"nodeType":"119","messageId":"120","endLine":16,"endColumn":61,"suggestions":"126"},{"ruleId":"117","severity":1,"message":"124","line":16,"column":62,"nodeType":"119","messageId":"120","endLine":16,"endColumn":63,"suggestions":"127"},{"ruleId":"128","severity":1,"message":"129","line":22,"column":42,"nodeType":"130","messageId":"131","endLine":22,"endColumn":44},{"ruleId":"106","replacedBy":"132"},{"ruleId":"108","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":33,"column":5,"nodeType":"136","messageId":"137","endLine":33,"endColumn":83},{"ruleId":"134","severity":1,"message":"135","line":35,"column":5,"nodeType":"136","messageId":"137","endLine":35,"endColumn":29},"no-native-reassign",["138"],"no-negated-in-lhs",["139"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'_' is assigned a value but never used.","Identifier","unusedVar","no-useless-escape","Unnecessary escape character: \\+.","Literal","unnecessaryEscape",["140","141"],"Unnecessary escape character: \\s.",["142","143"],"Unnecessary escape character: \\..",["144","145"],["146","147"],["148","149"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["138"],["139"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-global-assign","no-unsafe-negation",{"messageId":"150","fix":"151","desc":"152"},{"messageId":"153","fix":"154","desc":"155"},{"messageId":"150","fix":"156","desc":"152"},{"messageId":"153","fix":"157","desc":"155"},{"messageId":"150","fix":"158","desc":"152"},{"messageId":"153","fix":"159","desc":"155"},{"messageId":"150","fix":"160","desc":"152"},{"messageId":"153","fix":"161","desc":"155"},{"messageId":"150","fix":"162","desc":"152"},{"messageId":"153","fix":"163","desc":"155"},"removeEscape",{"range":"164","text":"165"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"166","text":"167"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"168","text":"165"},{"range":"169","text":"167"},{"range":"170","text":"165"},{"range":"171","text":"167"},{"range":"172","text":"165"},{"range":"173","text":"167"},{"range":"174","text":"165"},{"range":"175","text":"167"},[1127,1128],"",[1127,1127],"\\",[1149,1150],[1149,1149],[1151,1152],[1151,1151],[1165,1166],[1165,1165],[1167,1168],[1167,1167]]