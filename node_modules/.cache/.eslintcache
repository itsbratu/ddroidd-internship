[{"C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\index.js":"1","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\App.js":"2","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\NavBar\\NavBar.jsx":"3","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Landing\\Landing.jsx":"4","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Landing\\InfoLanding.jsx":"5","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Footer\\Footer.jsx":"6","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Submit\\Submit.jsx":"7","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Submit\\InfoSubmit.jsx":"8","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\Form.jsx":"9","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\InfoForm.jsx":"10","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\NameField.jsx":"11","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\AddressField.jsx":"12","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\ContactField.jsx":"13","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\SubAddressField.jsx":"14","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\constants.js":"15","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\userValidation.js":"16"},{"size":218,"mtime":1640133448318,"results":"17","hashOfConfig":"18"},{"size":508,"mtime":1640181187486,"results":"19","hashOfConfig":"18"},{"size":2462,"mtime":1640283418175,"results":"20","hashOfConfig":"18"},{"size":560,"mtime":1640265204150,"results":"21","hashOfConfig":"18"},{"size":2069,"mtime":1640283473308,"results":"22","hashOfConfig":"18"},{"size":709,"mtime":1640283504036,"results":"23","hashOfConfig":"18"},{"size":598,"mtime":1640265217990,"results":"24","hashOfConfig":"18"},{"size":677,"mtime":1640283393156,"results":"25","hashOfConfig":"18"},{"size":512,"mtime":1640265430678,"results":"26","hashOfConfig":"18"},{"size":8017,"mtime":1640272493759,"results":"27","hashOfConfig":"18"},{"size":1179,"mtime":1640271820079,"results":"28","hashOfConfig":"18"},{"size":1374,"mtime":1640271640010,"results":"29","hashOfConfig":"18"},{"size":1821,"mtime":1640269171976,"results":"30","hashOfConfig":"18"},{"size":3245,"mtime":1640271579073,"results":"31","hashOfConfig":"18"},{"size":2295,"mtime":1640268164574,"results":"32","hashOfConfig":"18"},{"size":3268,"mtime":1640267541010,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"taouo8",{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"36"},"C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\index.js",[],["71","72"],"C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\App.js",[],"C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\NavBar\\NavBar.jsx",["73"],"C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Landing\\Landing.jsx",[],"C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Landing\\InfoLanding.jsx",["74","75"],"C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Footer\\Footer.jsx",[],"C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Submit\\Submit.jsx",[],"C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Submit\\InfoSubmit.jsx",[],"C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\Form.jsx",[],"C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\InfoForm.jsx",["76"],"//Component that allows the user to register into ddroidd Winter Internship\r\n//Contains NameField , AddressField , SubAddressField , ContactField and ReCAPTCHA as child components\r\n\r\nimport React from 'react'\r\nimport NameField from './NameField';\r\nimport AddressField from './AddressField';\r\nimport ContactField from './ContactField';\r\nimport SubAddressField from './SubAddressField';\r\nimport ReCAPTCHA from \"react-google-recaptcha\"\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useState } from 'react';\r\nimport { getUserInput , validateName , validateAddress , validateContact } from './userValidation';\r\nimport { getStateObject } from './constants';\r\n\r\nconst CAPTCHA_API_KEY = process.env.REACT_APP_CAPTCHA_API_KEY;\r\nconst recaptchaRef = React.createRef();\r\n\r\nconst InfoForm = () => {\r\n\r\n    let routing = useHistory();\r\n\r\n    //state object for the form validation\r\n    const [validInput , setValidInput] = useState(getStateObject(null));\r\n\r\n    /**\r\n     * Validates user input and redirects him if the data is valid or displays error messages else\r\n     */\r\n    const validateUserInput = () => {\r\n        const {firstName , lastName , firstAddress , secondAddress , city , state , zipCode , phoneNumber , mailAddress} = getUserInput();\r\n        var validInput = getStateObject(true);\r\n\r\n        //validating each field in the form\r\n        validateName(firstName , lastName , validInput);\r\n        validateAddress(firstAddress , secondAddress , city , state , zipCode , validInput);\r\n        validateContact(phoneNumber , mailAddress , validInput);\r\n\r\n        //validating the captcha check\r\n        const recaptchaValue = recaptchaRef.current.getValue();\r\n        if(!(recaptchaValue.length > 0)){\r\n            validInput.validCaptcha = false;\r\n        }\r\n\r\n        //check if the user data is valid \r\n        var validUser = true;\r\n        for(const [_ , value] of Object.entries(validInput)){\r\n            if(value !== true){\r\n                validUser = false;\r\n            }\r\n        }\r\n        if(validUser){\r\n            //redirecting user to Submit page\r\n            routing.push({\r\n                pathname : '/submit',\r\n                //saving user data input for further processing\r\n                state : {\r\n                    firstName : firstName ,\r\n                    lastName : lastName ,\r\n                    firstAddress : firstAddress ,\r\n                    secondAddress : secondAddress , \r\n                    city : city , \r\n                    state : state ,\r\n                    zipCode : zipCode ,\r\n                    phoneNumber : phoneNumber , \r\n                    mailAddress : mailAddress\r\n                 }\r\n            });\r\n        }\r\n        setValidInput(validInput);\r\n    }\r\n\r\n    return(\r\n        <div className='w-2/3 h-form relative inset-x-center-section bg-athens-gray'>\r\n            <div className='flex flex-col items-center w-2/3 h-full relative inset-x-center-section py-20 select-none'>\r\n                <h1 className='text-5xl font-extrabold text-prussian-blue mt-20'>Application Form</h1>\r\n                <div className='grid grid-areas-form-layout mt-20 pt-5 bg-athens-gray h-full w-full'>\r\n\r\n                    {/* Form name input section */}\r\n\r\n                    <div className='grid grid-in-name'>\r\n                        <div className='flex justify-evenly'>\r\n                            <NameField name = {\"First Name\"} id = {\"firstName\"} userValidInput = {validInput.validFirstName}/>\r\n                            <NameField name = {\"Last Name\"} id = {\"lastName\"} userValidInput = {validInput.validLastName}/>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Form address input section */}\r\n\r\n                    <div className='grid grid-in-address mt-16'>\r\n                        <div className='flex flex-col justify-evenly'>\r\n                            <div className='flex items-center h-1/4 w-full px-5'>\r\n                                <h1 className='text-3xl font-extrabold text-prussian-blue -mb-5'>Address</h1>\r\n                            </div>\r\n                            <AddressField \r\n                                name = {\"Address Line 1\"} \r\n                                id = {\"firstAddress\"} \r\n                                placeholder = {\"Street name & number\"} \r\n                                mandatory = {true} \r\n                                userValidInput = {validInput.validAddrLine1}\r\n                            />\r\n                            <AddressField \r\n                                name = {\"Address Line 2\"} \r\n                                id = {\"secondAddress\"} \r\n                                placeholder = {\"Suite, apartament\"} \r\n                                mandatory = {false} \r\n                                userValidInput = {validInput.validAddrLine2}\r\n                            />\r\n                            <div className='flex w-full h-1/4 mt-10'>\r\n                                <SubAddressField name = {\"City\"} id = {\"city\"} userValidInput = {validInput.validCity}/>\r\n                                <SubAddressField name = {\"State\"} id = {\"state\"} userValidInput = {validInput.validState}/>\r\n                                <SubAddressField name = {\"Zip code\"} id = {\"zipCode\"} userValidInput = {validInput.validZipCode}/>\r\n                            </div>\r\n                            <div className='w-full h-1/6 mt-5'></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Form contact input section */}\r\n                    \r\n                    <div className='grid grid-in-contact bg-athens-gray mt-16'>\r\n                        <div className='flex flex-col justify-center h-1/2 w-full px-5'>\r\n                            <h1 className='text-3xl font-extrabold text-prussian-blue mb-5'>Contact information</h1>\r\n                        </div>\r\n                        <div className='flex h-1/2 w-full'>\r\n                            <ContactField \r\n                                name = {\"Phone number\"} \r\n                                id = {\"phoneNumber\"} \r\n                                placeholder = {\"555-5555\"} \r\n                                userValidInput = {validInput.validPhone}\r\n                            />\r\n                            <ContactField \r\n                                name = {\"Email address\"} \r\n                                id = {\"mailAddress\"} \r\n                                placeholder = {\"john@doe.com\"} \r\n                                userValidInput = {validInput.validMail}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Form submit section */}\r\n                    \r\n                    <div className='grid grid-in-submit'>\r\n                        <div className='flex justify-between items-center px-5'>\r\n                            <div className='flex flex-col justify-center h-full w-1/2'>\r\n                                <ReCAPTCHA \r\n                                    sitekey={`${CAPTCHA_API_KEY}`}\r\n                                    ref={recaptchaRef}\r\n                                    theme='dark'\r\n                                />\r\n                                {validInput.validCaptcha === false && <h1 className='w-full h-1/3 mt-4 font-extrabold text-xl text-red italic'>Please check the captcha</h1>}\r\n                            </div>\r\n                            <button \r\n                                className='h-2/5 w-1/3 bg-school-bus-yellow border animation ease-in-out duration-500 transform hover:scale-110' \r\n                                onClick = {() => {validateUserInput()}}\r\n                            >\r\n                                <h1 className='text-3xl font-bold text-prussian-blue'>Join Us</h1>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InfoForm;","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\NameField.jsx",[],"C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\AddressField.jsx",[],"C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\ContactField.jsx",[],"C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\SubAddressField.jsx",["77","78"],"//Component that allows the user to input their address\r\n\r\nimport React from 'react'\r\nimport {states} from './constants';\r\nimport propTypes from 'prop-types';\r\n\r\n/**\r\n * Displays an error message based on the subaddress input field\r\n * @param {String} subAddressType Name of the input field (\"City / Zip code\")\r\n * @returns h1\r\n */\r\nconst switchErrorMsg = (subAddressType) => {\r\n    if(subAddressType === \"City\"){\r\n        return (\r\n            <h1 className='w-full h-1/3 text-red text-xl italic font-extrabold pt-5 px-5'>City name should contain only letters!</h1>\r\n        );\r\n    }else{\r\n        return (\r\n            <h1 className='w-full h-1/3 text-red text-xl italic font-extrabold pt-5 px-5'>Please provide valid zip code!</h1>\r\n        );\r\n    }\r\n}\r\n\r\nconst SubAddressField = (props) => {\r\n\r\n    {/* Conditional rendering based on the type of subaddress user input field */}\r\n\r\n    {/* State select box */}\r\n    if(props.name === \"State\"){\r\n        return(\r\n            <div className='flex flex-col justify-center h-full w-1/3 px-5'>\r\n                <label \r\n                    htmlFor = {`${props.id}`} \r\n                    className='text-2xl text-prussian-blue font-bold'>\r\n                        {props.name}:<span className='text-red'>*</span>\r\n                </label>\r\n                <select \r\n                    id = {`${props.id}`} \r\n                    className= {`h-1/2 px-3 text-xl font-bold shadow-xl rounded-sm ${props.userValidInput === true && 'border-4 border-green rounded-xl'}`} \r\n                    placeholder={props.name}>\r\n                        <option disabled selected value>State</option>\r\n                        {states.map((currentState , key) => {\r\n                            return(\r\n                                <option id = {key} value = {currentState}>{currentState}</option>\r\n                            )\r\n                        })}\r\n                </select>\r\n                {/* Custom error message if user did not select a state */}\r\n                {props.userValidInput === false && <h1 className='w-full h-1/3 text-red text-xl italic font-extrabold pt-5 px-5'>Please select a state!</h1>}\r\n            </div>\r\n        );\r\n    }else{\r\n        return(\r\n            <div className='flex flex-col justify-center h-full w-1/3 px-5'>\r\n                <label \r\n                    htmlFor = {`${props.id}`} \r\n                    className='text-2xl text-black font-bold'>\r\n                        {props.name}:<span className='text-red'>*</span>\r\n                </label>\r\n                <input \r\n                    id = {`${props.id}`} \r\n                    className= {`h-1/2 px-3 text-xl font-bold shadow-input-shadow rounded-sm ${props.userValidInput === true && 'border-4 border-green rounded-xl'}`} \r\n                    placeholder={props.name}\r\n                />\r\n                {/* Custom error message based on the subaddress input field type */}\r\n                {props.userValidInput === false && switchErrorMsg(props.name)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nSubAddressField.propTypes = {\r\n    name : propTypes.string.isRequired ,\r\n    id : propTypes.string.isRequired , \r\n    userValidInput : propTypes.bool.isRequired\r\n}\r\n\r\nexport default SubAddressField;","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\constants.js",["79","80","81","82","83"],"//List of all the states in Romania , ordered alphabetically\r\nexport const states = ['Alba' , 'Arad' , 'Argeș' , 'Bacău' , 'Bihor' , 'Bistrița-Năsăud' , 'Botoșani' , 'Brăila' , 'Brașov' , 'București' ,  'Buzău' , 'Călărași' ,\r\n                 'Caraș-Severin' , 'Cluj' , 'Constanța' , 'Covasna' , 'Dâmbovița' , 'Dolj' , 'Galați' , 'Giurgiu' , 'Gorj' , 'Harghita' , 'Hunedoara' ,\r\n                 'Ialomița' , 'Iași' , 'Ilfov' , 'Maramureș' , 'Mehedinți' , 'Mureș' , 'Neamț' , 'Olt' , 'Prahova' , 'Sălaj' , 'Satu Mare' , 'Sibiu' ,\r\n                 'Suceava' , 'Teleorman' , 'Timiș' , 'Tulcea' , 'Vâlcea' , 'Vaslui' , 'Vrancea'];\r\n\r\n//List of all regexes used for user input validation\r\nexport const regexList = {\r\n    //regex that matches letters , diacritics and whitespaces\r\n    onlyLetters : \"^[a-zA-ZÀ-ž- ]+$\" ,\r\n    //regex that matches letters , digits and whitespaces (min 1 of each)\r\n    address : \"^(?:[0-9 ]+[a-zA-ZÀ-ž ]|[a-zA-ZÀ-ž ]+[0-9 ])[a-zA-ZÀ-ž0-9 ]*$\" ,\r\n    //regex that matches a sequence of exact 6 digits\r\n    zipCode : \"^[0-9]{6}$\" ,\r\n    //regex that matches a valid phone number\r\n    phoneNumber : \"^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$\" ,\r\n    //regex that matches a valid mail address (only (A-Za-z0-9_!#$%&'*+/=?`{|}~^.-) before the @ and only (A-Za-z.-) after that)\r\n    mailAddress : \"^[A-Za-z0-9_!#$%&'*+/=?`{|}~^.-]+@[A-Za-z.-]+$\"\r\n}\r\n\r\n//List of all ids for the input fields\r\nexport const inputIds = [\"firstName\" , \"lastName\" , \"firstAddress\" , \"secondAddress\" , \"city\" , \"state\" , \"zipCode\" , \"phoneNumber\" , \"mailAddress\"];\r\n\r\n/**\r\n * Returns a validation state object based on a state \r\n * @param {Boolean | null} initialState The value for every key in the object\r\n * @returns {Object}                    Initialized state object\r\n */\r\nexport const getStateObject = (initialState) => {\r\n    return {\r\n        validFirstName : initialState ,\r\n        validLastName : initialState ,\r\n        validAddrLine1 : initialState ,\r\n        validAddrLine2 : initialState ,\r\n        validCity : initialState ,\r\n        validState : initialState ,\r\n        validZipCode : initialState ,\r\n        validPhone : initialState ,\r\n        validMail : initialState ,\r\n        validCaptcha : initialState ,\r\n    }\r\n}\r\n\r\n\r\n","C:\\React_Projects\\ddroidd_internship\\webapp\\app\\src\\Form\\userValidation.js",["84"],"//File where we store functions that take part in user validation process\r\n\r\nimport { regexList } from './constants';\r\nimport { inputIds } from './constants';\r\n\r\n/**\r\n * Collects user input from registration form\r\n * @returns {Object}  User data object (key - input field , value - user input)\r\n */\r\nexport const getUserInput = () => {\r\n    var userInputs = {\r\n        firstName : \"\" , \r\n        lastName : \"\" , \r\n        firstAddress : \"\" , \r\n        secondAddress : \"\" ,\r\n        city : \"\" ,\r\n        state : \"\" ,\r\n        zipCode : \"\" ,\r\n        phoneNumber : \"\" ,\r\n        mailAddress : \"\" ,\r\n    };\r\n    inputIds.map((currentInputField , _) => {\r\n        userInputs[currentInputField] = document.getElementById(currentInputField).value;\r\n    });\r\n    return userInputs;\r\n}    \r\n\r\n/**\r\n * Validates the name section of the form\r\n * @param {String} firstName User input for the First Name field\r\n * @param {String} lastName  User input for the Last Name field\r\n * @param {Object} validInput Object in which we store the name validation status based on regex check\r\n */\r\nexport const validateName = (firstName , lastName , validInput) => {\r\n    const onlyLettersRegex = new RegExp(regexList.onlyLetters);\r\n    if(!onlyLettersRegex.test(firstName)){\r\n        validInput.validFirstName = false;\r\n    }\r\n    if(!onlyLettersRegex.test(lastName)){\r\n        validInput.validLastName = false;\r\n    }\r\n}\r\n\r\n/**\r\n * Validates the address section of the form\r\n * @param {String} addressLine1 User input for the Address Line 1 field\r\n * @param {String} addressLine2 User input for the Address Line 2 field\r\n * @param {String} city User input for the City field\r\n * @param {String | true} state User input for the State field\r\n * @param {String} zipCode User input for the Zip code field\r\n * @param {Object} validInput Object in which we store the address validation status based on regex check\r\n */\r\nexport const validateAddress = (addressLine1 , addressLine2 , city , state , zipCode , validInput) => {\r\n    const onlyLettersRegex = new RegExp(regexList.onlyLetters);\r\n    const zipCodeRegex = new RegExp(regexList.zipCode);\r\n    const addressRegex = new RegExp(regexList.address);\r\n    if(!addressRegex.test(addressLine1)){\r\n        validInput.validAddrLine1 = false;\r\n    }\r\n    if(addressLine2.length > 0 && !addressRegex.test(addressLine2)){\r\n        validInput.validAddrLine2 = false;\r\n    }\r\n    if(!onlyLettersRegex.test(city)){\r\n        validInput.validCity = false;\r\n    }\r\n    if(state === 'true'){\r\n        validInput.validState = false;\r\n    }\r\n    if(!zipCodeRegex.test(zipCode)){\r\n        validInput.validZipCode = false;\r\n    }\r\n}\r\n\r\n/**\r\n * Validates the contact section of the form\r\n * @param {String} phone User input for the Phone number field\r\n * @param {String} mail User input for the Email address\r\n * @param {Object} validInput Object in which we store the contact validation status based on regex check\r\n */\r\nexport const validateContact = (phone , mail , validInput) => {\r\n    const phoneRegex = new RegExp(regexList.phoneNumber);\r\n    const mailRegex = new RegExp(regexList.mailAddress);\r\n    if(!phoneRegex.test(phone)){\r\n        validInput.validPhone = false;\r\n    }\r\n    if(!mailRegex.test(mail)){\r\n        validInput.validMail = false;\r\n    }\r\n}",{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":16,"column":13,"nodeType":"91","endLine":19,"endColumn":58},{"ruleId":"89","severity":1,"message":"90","line":19,"column":21,"nodeType":"91","endLine":20,"endColumn":51},{"ruleId":"89","severity":1,"message":"90","line":21,"column":21,"nodeType":"91","endLine":22,"endColumn":51},{"ruleId":"92","severity":1,"message":"93","line":45,"column":20,"nodeType":"94","messageId":"95","endLine":45,"endColumn":21},{"ruleId":"96","severity":1,"message":"97","line":26,"column":5,"nodeType":"98","messageId":"99","endLine":26,"endColumn":83},{"ruleId":"96","severity":1,"message":"97","line":28,"column":5,"nodeType":"98","messageId":"99","endLine":28,"endColumn":29},{"ruleId":"100","severity":1,"message":"101","line":16,"column":22,"nodeType":"102","messageId":"103","endLine":16,"endColumn":23,"suggestions":"104"},{"ruleId":"100","severity":1,"message":"105","line":16,"column":44,"nodeType":"102","messageId":"103","endLine":16,"endColumn":45,"suggestions":"106"},{"ruleId":"100","severity":1,"message":"107","line":16,"column":46,"nodeType":"102","messageId":"103","endLine":16,"endColumn":47,"suggestions":"108"},{"ruleId":"100","severity":1,"message":"105","line":16,"column":60,"nodeType":"102","messageId":"103","endLine":16,"endColumn":61,"suggestions":"109"},{"ruleId":"100","severity":1,"message":"107","line":16,"column":62,"nodeType":"102","messageId":"103","endLine":16,"endColumn":63,"suggestions":"110"},{"ruleId":"111","severity":1,"message":"112","line":22,"column":42,"nodeType":"113","messageId":"114","endLine":22,"endColumn":44},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'_' is assigned a value but never used.","Identifier","unusedVar","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-useless-escape","Unnecessary escape character: \\+.","Literal","unnecessaryEscape",["117","118"],"Unnecessary escape character: \\s.",["119","120"],"Unnecessary escape character: \\..",["121","122"],["123","124"],["125","126"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",{"messageId":"127","fix":"128","desc":"129"},{"messageId":"130","fix":"131","desc":"132"},{"messageId":"127","fix":"133","desc":"129"},{"messageId":"130","fix":"134","desc":"132"},{"messageId":"127","fix":"135","desc":"129"},{"messageId":"130","fix":"136","desc":"132"},{"messageId":"127","fix":"137","desc":"129"},{"messageId":"130","fix":"138","desc":"132"},{"messageId":"127","fix":"139","desc":"129"},{"messageId":"130","fix":"140","desc":"132"},"removeEscape",{"range":"141","text":"142"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"143","text":"144"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"145","text":"142"},{"range":"146","text":"144"},{"range":"147","text":"142"},{"range":"148","text":"144"},{"range":"149","text":"142"},{"range":"150","text":"144"},{"range":"151","text":"142"},{"range":"152","text":"144"},[1127,1128],"",[1127,1127],"\\",[1149,1150],[1149,1149],[1151,1152],[1151,1151],[1165,1166],[1165,1165],[1167,1168],[1167,1167]]